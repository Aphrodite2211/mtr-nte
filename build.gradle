import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
	id "de.undercouch.download" version "4.1.2"
	id "com.github.johnrengelman.shadow" version "7.1.0"
	id "base"
}

def default_minecraft_version = "1.18.2"
def minecraft_version = project.properties.containsKey("buildVersion") ? project.getProperties().get("buildVersion") : default_minecraft_version
def is_1_16 = (minecraft_version as String).startsWith("1.16")
def is_1_17 = (minecraft_version as String).startsWith("1.17")
def is_1_18 = (minecraft_version as String).startsWith("1.18")

rootProject.ext.architectury_version = is_1_16 ? rootProject.architectury_version_1_16 : is_1_17 ? rootProject.architectury_version_1_17 : is_1_18 ? rootProject.architectury_version_1_18 : rootProject.architectury_version_1_19
rootProject.ext.architectury_id = is_1_16 ? "me.shedaniel" : "dev.architectury"
rootProject.ext.fabric_api_version = is_1_16 ? rootProject.fabric_version_1_16 : is_1_17 ? rootProject.fabric_version_1_17 : is_1_18 ? rootProject.fabric_version_1_18 : rootProject.fabric_version_1_19
rootProject.ext.forge_version = is_1_16 ? rootProject.forge_version_1_16 : is_1_17 ? rootProject.forge_version_1_17 : is_1_18 ? rootProject.forge_version_1_18 : rootProject.forge_version_1_19

rootProject.archivesBaseName = "MtrSteamLoco-forge-1.18.2"
def forgeBuildName = "MtrSteamLoco-forge-" + minecraft_version + "-" + project.mod_version + ".jar"
task jar(type: LongjingCompatDummyBuildTask) {
	setDestinationDir new File("build/")
	setArchiveName forgeBuildName
}
task shadowJar(type: LongjingCompatDummyBuildTask) {
	setDestinationDir new File("build/")
	setArchiveName forgeBuildName
}
task remapJar(type: LongjingCompatDummyBuildTask) {
	setDestinationDir new File("build/")
	setArchiveName forgeBuildName
}
import org.gradle.api.internal.file.copy.CopyAction
class LongjingCompatDummyBuildTask extends AbstractArchiveTask {
	@Override
	protected CopyAction createCopyAction() {
		return null
	}
}

architectury {
	minecraft = minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	loom {
		silentMojangMappingsLicense()
	}

	dependencies {
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings loom.officialMojangMappings()
		implementation files("../checkouts/mtr-common.jar")
	}
}

task setupLibrary() {
	doLast {
		download {
			src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-common-${minecraft_version}-${rootProject.mtr_version}-dev.jar"
			dest "checkouts/mtr-common.jar"
			overwrite true
		}

		download {
			src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-fabric-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
			dest "checkouts/mtr-fabric.jar"
			overwrite true
		}

		download {
			src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-forge-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
			dest "checkouts/mtr-forge.jar"
			overwrite true
		}
	}
}

task setupFiles() {
	download {
		src "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/${is_1_16 ? "1.16" : is_1_17 ? "1.17" : is_1_18 ? "1.18" : "1.19"}.zip"
		dest "common/src/main/java/cn/zbx1425/mtrsteamloco/mappings/files.zip"
		overwrite true
	}

	copy {
		outputs.upToDateWhen { false }
		from(zipTree("common/src/main/java/cn/zbx1425/mtrsteamloco/mappings/files.zip")) { eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
		into "common/src/main/java/cn/zbx1425/mtrsteamloco/mappings"
		filter(ReplaceTokens, tokens: ["package": "cn.zbx1425.mtrsteamloco.mappings; import mtr.mappings.*"])
	}

	ant.path { ant.fileset(dir: "common/src/main/java/cn/zbx1425/mtrsteamloco/mappings", includes: "Fabric*.java") }.list().each {
		ant.move(file: it, todir: "fabric/src/main/java/cn/zbx1425/mtrsteamloco/mappings")
	}

	ant.path { ant.fileset(dir: "common/src/main/java/cn/zbx1425/mtrsteamloco/mappings", includes: "Forge*.java") }.list().each {
		ant.move(file: it, todir: "forge/src/main/java/cn/zbx1425/mtrsteamloco/mappings")
	}

	ant.delete(dir: "common/src/main/java/cn/zbx1425/mtrsteamloco/mappings")

	copy {
		outputs.upToDateWhen { false }
		from "checkouts/mtr-fabric.jar"
		into "fabric/run/mods"
	}

	copy {
		outputs.upToDateWhen { false }
		from "checkouts/mtr-forge.jar"
		into "forge/run/mods"
	}
}

allprojects {
	apply plugin: "architectury-plugin"

	version = minecraft_version + "-" + project.mod_version
	group = project.maven_group

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"

		if (is_1_16) {
			def targetVersion = 8
			if (JavaVersion.current().isJava9Compatible()) {
				options.release = targetVersion
			}
		} else if (is_1_17) {
			options.release = 16
		} else {
			options.release = 17
		}
	}

	afterEvaluate {
		for (def task in it.tasks) {
			if (task != rootProject.tasks.setupFiles) {
				task.dependsOn rootProject.tasks.setupFiles
			}
		}
		rootProject.tasks.build.dependsOn rootProject.tasks.setupLibrary

	}
}
